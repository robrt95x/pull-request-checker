name: üîÑ Manual PR Review

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: number
      rubric:
        description: 'Custom rubric to use (optional)'
        required: false
        default: 'code-review-rubric.md'
        type: string
      base_branch:
        description: 'Base branch to compare against'
        required: false
        default: 'main'
        type: string

env:
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  manual-review:
    name: üìã Manual PR Review
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Get PR information
        id: pr-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_data=$(gh pr view ${{ github.event.inputs.pr_number }} --json title,author,headRefName,baseRefName,url)
          
          echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "pr_title=$(echo "$pr_data" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "pr_author=$(echo "$pr_data" | jq -r '.author.login')" >> $GITHUB_OUTPUT
          echo "head_branch=$(echo "$pr_data" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          echo "pr_url=$(echo "$pr_data" | jq -r '.url')" >> $GITHUB_OUTPUT

      - name: üîÑ Checkout PR branch
        run: |
          gh pr checkout ${{ github.event.inputs.pr_number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Build TypeScript
        run: npm run build

      - name: üîç Run Manual PR Review
        id: review
        run: |
          # Set environment variables
          export PROJECT_NAME="${{ github.repository }}"
          export PR_NUMBER="${{ github.event.inputs.pr_number }}"
          export PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
          export PR_AUTHOR="${{ steps.pr-info.outputs.pr_author }}"
          export PR_URL="${{ steps.pr-info.outputs.pr_url }}"
          
          # Run review with specified parameters
          output_file="manual_pr_review_${{ github.event.inputs.pr_number }}_$(date +%Y%m%d_%H%M%S).md"
          
          echo "üîç Running manual review..."
          echo "- PR: #${{ github.event.inputs.pr_number }}"
          echo "- Rubric: ${{ github.event.inputs.rubric }}"
          echo "- Base branch: ${{ github.event.inputs.base_branch }}"
          
          if npm run start -- \
            --branch "${{ github.event.inputs.base_branch }}" \
            --rubric "${{ github.event.inputs.rubric }}" \
            --output "$output_file" \
            --debug; then
            
            echo "review_success=true" >> $GITHUB_OUTPUT
            echo "review_file=output/$output_file" >> $GITHUB_OUTPUT
            
            # Extract metrics
            if [ -f "output/$output_file" ]; then
              final_score=$(grep -o "Puntuaci√≥n Final: [0-9.]*" "output/$output_file" | head -1 | grep -o "[0-9.]*" || echo "N/A")
              status=$(grep -o "Estado\*\*: [A-Z ]*" "output/$output_file" | head -1 | cut -d':' -f2 | xargs || echo "N/A")
              
              echo "final_score=$final_score" >> $GITHUB_OUTPUT
              echo "review_status=$status" >> $GITHUB_OUTPUT
              
              echo "‚úÖ Review completed successfully"
              echo "üìä Score: $final_score/10"
              echo "üìã Status: $status"
            fi
          else
            echo "review_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Review failed"
            exit 1
          fi

      - name: üìù Post Manual Review Comment
        if: steps.review.outputs.review_success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              const reviewFile = '${{ steps.review.outputs.review_file }}';
              const reportContent = fs.readFileSync(reviewFile, 'utf8');
              
              const finalScore = '${{ steps.review.outputs.final_score }}';
              const reviewStatus = '${{ steps.review.outputs.review_status }}';
              const rubricUsed = '${{ github.event.inputs.rubric }}';
              
              let statusEmoji = '‚ùì';
              if (reviewStatus.includes('EXCELENTE')) statusEmoji = 'üåü';
              else if (reviewStatus.includes('APROBADO')) statusEmoji = '‚úÖ';
              else if (reviewStatus.includes('REQUIERE CAMBIOS')) statusEmoji = '‚ö†Ô∏è';
              else if (reviewStatus.includes('RECHAZADO')) statusEmoji = '‚ùå';
              
              const comment = `## ${statusEmoji} Revisi√≥n Manual de PR #${{ github.event.inputs.pr_number }}
              
              **Puntuaci√≥n Final:** ${finalScore}/10
              **Estado:** ${reviewStatus}
              **R√∫brica utilizada:** ${rubricUsed}
              **Solicitado por:** @${{ github.actor }}
              
              ---
              
              <details>
              <summary>üìã Ver Reporte Completo de Revisi√≥n Manual</summary>
              
              ${reportContent}
              
              </details>
              
              ---
              
              *üîÑ Revisi√≥n manual ejecutada por [@${{ github.actor }}](https://github.com/${{ github.actor }}) el ${new Date().toLocaleString('es-ES', { 
                timeZone: 'America/Mexico_City',
                year: 'numeric',
                month: '2-digit', 
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
              })}*
              
              *Para ejecutar otra revisi√≥n manual, usa el [workflow Manual PR Review](https://github.com/${{ github.repository }}/actions/workflows/manual-review.yml)*`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.inputs.pr_number }},
                body: comment
              });
              
              console.log('‚úÖ Manual review comment posted successfully');
              
            } catch (error) {
              console.error('‚ùå Error posting manual review comment:', error);
              throw error;
            }

      - name: üìÅ Upload Manual Review Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: manual-pr-review-${{ github.event.inputs.pr_number }}-${{ github.run_number }}
          path: |
            output/*.md
          retention-days: 30

      - name: üìä Manual Review Summary
        if: always()
        run: |
          echo "## üîÑ Manual PR Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ github.event.inputs.pr_number }} - ${{ steps.pr-info.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @${{ steps.pr-info.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Requested by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Branch:** ${{ github.event.inputs.base_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rubric Used:** ${{ github.event.inputs.rubric }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Review Success:** ${{ steps.review.outputs.review_success }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.review.outputs.review_success }}" = "true" ]; then
            echo "- **Final Score:** ${{ steps.review.outputs.final_score }}/10" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ${{ steps.review.outputs.review_status }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚ö° Manual Review Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- üéØ Custom rubric selection" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ On-demand execution" >> $GITHUB_STEP_SUMMARY
          echo "- üîß Custom base branch comparison" >> $GITHUB_STEP_SUMMARY
          echo "- üìä Historical tracking via artifacts" >> $GITHUB_STEP_SUMMARY
