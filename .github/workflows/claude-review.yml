name: Claude Code Review
on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-review:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || contains(github.event.comment.body, '@claude') }}
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Get PR Information
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "base_branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          else
            # Para comentarios, obtener info del PR asociado
            PR_NUMBER=$(echo "${{ github.event.issue.pull_request.url }}" | grep -o '[0-9]*$')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "base_branch=main" >> $GITHUB_OUTPUT
          fi
        
      - name: Load Claude Configuration
        id: claude-config
        run: |
          # Verificar si existe CLAUDE.md y cargarlo
          if [ -f "CLAUDE.md" ]; then
            echo "claude_prompt_exists=true" >> $GITHUB_OUTPUT
            echo "Using CLAUDE.md configuration file"
          else
            echo "claude_prompt_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ CLAUDE.md not found, using default prompts"
          fi
        
      - name: Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prompt: "/review"
          claude_args: |
            --max-turns 5
            --model claude-3-5-sonnet-20241022
            --system-prompt-file CLAUDE.md
            
      - name: Save Review as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-review-report-pr-${{ steps.pr-info.outputs.pr_number }}
          path: |
            claude-review-*.md
            review-*.md
            **/claude-output*.md
          retention-days: 30
          if-no-files-found: warn
          
      - name: Create Review Report File
        id: create-report
        run: |
          # Crear archivo de reporte estructurado
          REPORT_FILE="code-review-pr-${{ steps.pr-info.outputs.pr_number }}-$(date +%Y%m%d-%H%M%S).md"
          
          cat > "$REPORT_FILE" << EOF
          # Code Review Report - PR #${{ steps.pr-info.outputs.pr_number }}
          
          **Branch**: ${{ steps.pr-info.outputs.branch_name }}
          **Base**: ${{ steps.pr-info.outputs.base_branch }}
          **Date**: $(date)
          **Reviewer**: Claude AI
          
          ---
          
          ${{ steps.claude-review.outputs.response }}
          
          ---
          *Generated by Claude Code Review Action*
          EOF
          
          echo "report_file=$REPORT_FILE" >> $GITHUB_OUTPUT
          echo "Report saved as: $REPORT_FILE"
          
      - name: Upload Structured Report
        uses: actions/upload-artifact@v4
        with:
          name: structured-review-pr-${{ steps.pr-info.outputs.pr_number }}
          path: ${{ steps.create-report.outputs.report_file }}
          retention-days: 30
          
      - name: Post Review Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const reviewContent = `${{ steps.claude-review.outputs.response }}`;
            
            const commentBody = `## 🤖 Claude Code Review
              
            ${reviewContent}
            
            ---
            
            📋 **Review Artifacts**: Check the "Artifacts" section in this workflow run for downloadable reports.
            
            🔧 **Re-review**: Comment \`@claude /review\` to trigger a new review.
            🔒 **Security Focus**: Comment \`@claude /security\` for security-specific analysis.
            ⚡ **Performance Focus**: Comment \`@claude /performance\` for performance analysis.
            
            *Automated review by Claude AI | [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Crear comentario en el PR con el review
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            
      - name: Check Review Score and Status
        uses: actions/github-script@v7
        with:
          script: |
            const review = `${{ steps.claude-review.outputs.response }}`;
            
            // Buscar score en el review
            const scoreMatch = review.match(/Final Score:\s*(\d+(?:\.\d+)?)/i);
            const statusMatch = review.match(/Status:\s*\[([^\]]+)\]/i);
            
            if (scoreMatch) {
              const score = parseFloat(scoreMatch[1]);
              const status = statusMatch ? statusMatch[1] : 'UNKNOWN';
              
              console.log(`📊 Review Score: ${score}/10`);
              console.log(`📋 Status: ${status}`);
              
              // Crear summary
              core.summary
                .addHeading('Code Review Results', 2)
                .addTable([
                  [{data: 'Metric', header: true}, {data: 'Value', header: true}],
                  ['Score', `${score}/10`],
                  ['Status', status],
                  ['PR Number', '${{ steps.pr-info.outputs.pr_number }}'],
                  ['Branch', '${{ steps.pr-info.outputs.branch_name }}']
                ])
                .write();
              
              // Fallar si score es muy bajo
              if (score < 7) {
                core.setFailed(`❌ Code review failed with score ${score}/10. Minimum required: 7/10`);
              } else {
                console.log(`✅ Code review passed with score ${score}/10`);
              }
            } else {
              console.log('⚠️ Could not extract score from review');
              core.summary
                .addHeading('Code Review Results', 2)
                .addRaw('Could not extract numerical score from review')
                .write();
            }
