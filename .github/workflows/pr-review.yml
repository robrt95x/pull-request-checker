name: üîç PR Reviewer - Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master, develop]

env:
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}

jobs:
  pr-review:
    name: üìã Automated PR Review
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history to enable diff comparison
          fetch-depth: 0
          # Get the PR branch
          ref: ${{ github.event.pull_request.head.sha }}

      - name: üîß Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl git

      - name: üìä Get PR information
        id: pr-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "head_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT

      - name: üîÑ Fetch base branch
        run: git fetch origin ${{ steps.pr-info.outputs.base_branch }}

      - name: üîç Run PR Review Analysis
        id: review
        run: |
          # Make scripts executable
          chmod +x scripts/review.sh scripts/utils.sh
          
          # Set environment variables for the review
          export PROJECT_NAME="${{ github.repository }}"
          export PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          export PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
          export PR_AUTHOR="${{ steps.pr-info.outputs.pr_author }}"
          export PR_URL="${{ steps.pr-info.outputs.pr_url }}"
          
          # Run the review against the base branch
          echo "üîç Running automated PR review..."
          
          # Create output filename with PR number
          output_file="pr_review_${{ steps.pr-info.outputs.pr_number }}_$(date +%Y%m%d_%H%M%S).md"
          
          if scripts/review.sh --branch "${{ steps.pr-info.outputs.base_branch }}" --output "$output_file"; then
            echo "review_success=true" >> $GITHUB_OUTPUT
            echo "review_file=scripts/output/$output_file" >> $GITHUB_OUTPUT
            
            # Extract key metrics from the report for the summary
            if [ -f "scripts/output/$output_file" ]; then
              # Try to extract the final score (this is a simple approach)
              final_score=$(grep -o "Puntuaci√≥n Final: [0-9.]*" "scripts/output/$output_file" | head -1 | grep -o "[0-9.]*" || echo "N/A")
              status=$(grep -o "Estado\*\*: [A-Z ]*" "scripts/output/$output_file" | head -1 | cut -d':' -f2 | xargs || echo "N/A")
              
              echo "final_score=$final_score" >> $GITHUB_OUTPUT
              echo "review_status=$status" >> $GITHUB_OUTPUT
            fi
          else
            echo "review_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Review analysis failed"
            exit 1
          fi

      - name: üìù Post Review Comment
        if: steps.review.outputs.review_success == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read the review report
              const reviewFile = '${{ steps.review.outputs.review_file }}';
              const reportContent = fs.readFileSync(reviewFile, 'utf8');
              
              // Extract summary for comment preview
              const finalScore = '${{ steps.review.outputs.final_score }}';
              const reviewStatus = '${{ steps.review.outputs.review_status }}';
              
              // Determine status emoji
              let statusEmoji = '‚ùì';
              if (reviewStatus.includes('EXCELENTE')) statusEmoji = 'üåü';
              else if (reviewStatus.includes('APROBADO')) statusEmoji = '‚úÖ';
              else if (reviewStatus.includes('REQUIERE CAMBIOS')) statusEmoji = '‚ö†Ô∏è';
              else if (reviewStatus.includes('RECHAZADO')) statusEmoji = '‚ùå';
              
              // Create comment with summary and collapsible full report
              const comment = `## ${statusEmoji} Revisi√≥n Autom√°tica de PR #${{ steps.pr-info.outputs.pr_number }}
              
              **Puntuaci√≥n Final:** ${finalScore}/10
              **Estado:** ${reviewStatus}
              
              ---
              
              <details>
              <summary>üìã Ver Reporte Completo de Revisi√≥n</summary>
              
              ${reportContent}
              
              </details>
              
              ---
              
              *ü§ñ Reporte generado autom√°ticamente por [PR Reviewer](https://github.com/${{ github.repository }}) el ${new Date().toLocaleString('es-ES', { 
                timeZone: 'America/Mexico_City',
                year: 'numeric',
                month: '2-digit', 
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
              })}*
              
              *¬øTienes preguntas sobre este reporte? Consulta la [documentaci√≥n](https://github.com/${{ github.repository }}/blob/main/README.md) del proyecto.*`;
              
              // Post comment on PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-info.outputs.pr_number }},
                body: comment
              });
              
              console.log('‚úÖ Review comment posted successfully');
              
            } catch (error) {
              console.error('‚ùå Error posting review comment:', error);
              
              // Post a simple error comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-info.outputs.pr_number }},
                body: `## ‚ö†Ô∏è Error en Revisi√≥n Autom√°tica
                
                Hubo un problema al generar el reporte de revisi√≥n autom√°tica.
                
                **Error:** ${error.message}
                
                Por favor, ejecuta la revisi√≥n manualmente con:
                \`\`\`bash
                cd scripts
                ./review.sh --branch ${{ steps.pr-info.outputs.base_branch }}
                \`\`\`
                
                *ü§ñ Mensaje generado por PR Reviewer Automation*`
              });
            }

      - name: üéØ Set PR Status Check
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reviewSuccess = '${{ steps.review.outputs.review_success }}';
            const finalScore = '${{ steps.review.outputs.final_score }}';
            const reviewStatus = '${{ steps.review.outputs.review_status }}';
            
            let state = 'pending';
            let description = 'Revisi√≥n en progreso...';
            
            if (reviewSuccess === 'true') {
              const score = parseFloat(finalScore);
              
              if (score >= 9) {
                state = 'success';
                description = `Excelente (${finalScore}/10) - Listo para merge`;
              } else if (score >= 7) {
                state = 'success';
                description = `Aprobado (${finalScore}/10) - Cambios menores opcionales`;
              } else if (score >= 5) {
                state = 'failure';
                description = `Requiere cambios (${finalScore}/10) - Revisar comentarios`;
              } else {
                state = 'failure';
                description = `Rechazado (${finalScore}/10) - Refactorizaci√≥n necesaria`;
              }
            } else {
              state = 'error';
              description = 'Error en an√°lisis autom√°tico - Revisar manualmente';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ github.event.pull_request.head.sha }}',
              state: state,
              description: description,
              context: 'pr-reviewer/automated-review'
            });

      - name: üìÅ Upload Review Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-review-${{ steps.pr-info.outputs.pr_number }}-${{ github.run_number }}
          path: |
            scripts/output/*.md
          retention-days: 30

      - name: üìä Job Summary
        if: always()
        run: |
          echo "## üîç PR Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **PR:** #${{ steps.pr-info.outputs.pr_number }} - ${{ steps.pr-info.outputs.pr_title }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** @${{ steps.pr-info.outputs.pr_author }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Base Branch:** ${{ steps.pr-info.outputs.base_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Review Success:** ${{ steps.review.outputs.review_success }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.review.outputs.review_success }}" = "true" ]; then
            echo "- **Final Score:** ${{ steps.review.outputs.final_score }}/10" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ${{ steps.review.outputs.review_status }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Report File:** ${{ steps.review.outputs.review_file }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Analyzed code changes" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Generated detailed review report" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Posted review comment on PR" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Set commit status check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Uploaded report as artifact" >> $GITHUB_STEP_SUMMARY
